#!/usr/bin/env node
		var latte_lib = require("latte_lib");
		var merge = function(data, inData) {
			if(inData) {
				return data;
			}
			return data;
		}
		var Path = require("path");
		var doCommand = function(command) {
			var lade = require("../lib/index.js");
			
			var Fs = latte_lib.fs;
			var data = lade.load(command.inConfig);
			var object = lade.toObject(data);
			
			var result = lade.parse(object);
			//if(command.outDom) {
			//	Fs.writeFileSync(command.outDom, result.html);
			//}
			
			var cwd = process.cwd() + "/";
			if(command.outData) {
				var inData;
				try {
					var inData = Fs.readFileSync(cwd + command.outData);
					inData = JSON.parse(inData);
				}catch(e) {
					inData = null;
				}
				
				Fs.writeFileSync(cwd + command.outData, merge(result.data));
			}
			
			if(command.outHtml) {
				Fs.writeFileSync(cwd + command.outHtml, result.html);	
			}								

		}
	var GetConfig = function() {
		var config;
		var index = process.argv.indexOf("-c");
		if(index != -1) {
			config = process.argv[index+1];
		}
		config = config || ".latte/lade.json";
		var buildConfigPath = Path.join(process.cwd()+"/"+config);
		var buildConfig;
		try {
			buildConfig = require(buildConfigPath);
		}catch(e) {
			return null;
		}
		
		
		//doCommand(buildConfig)
		
		return buildConfig;
	};
module.exports = function(command) {
	var config = GetConfig();
	var commands;
	commands = command?  config[(command|| "build")]  : config["build"];
	if(!commands) {
		return console.log("config file error");
	}
	var result = [];
	commands.forEach(function(o) {
		if(latte_lib.isString(o)) {
			result = result.concat(config.commands[o]);
		}else{
			result.push(o);
		}		
	});
	var funcs = result.map(function(command) {
		return  function(callback) {
			switch(command.type) {
				case "build":
					doCommand(command);
					callback();
				break;
				default:
					callback("command.type is "+command.type);
				break;
			}
		} 
	});
	var startTime = Date.now();
	latte_lib.async.series(funcs, function(err ) {
		if(err) {
			return console.log(err);
		}
		console.log(Date.now() - startTime + "ms");
	});



}